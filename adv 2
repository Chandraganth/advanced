Q1. What is the relationship between classes and modules?

a module in python is simply a way to organize the code, and it contains either python classes or just functions.
Classes may generate instances  and have per-instance state (instance variables)

Q2. How do you make instances and classes?
 
 keyword class followed by class name

Q3. Where and how should be class attributes created?
 class attribute is shared by all instances of the class. To define a class attribute, you place it outside of the __init__() method

Q4. Where and how are instance attributes created?

Instance attributes are defined in the constructor. Defined directly inside a class. Defined inside a constructor using the self parameter

Q5. What does the term self in a Python class mean?

The self parameter is a reference to the current instance of the class and is used to access variables that belongs to the class.

Q6. How does a Python class handle operator overloading?

 overloading is achieved by overriding the method which is specifically for that operator in the user-defined class.

Q7. When do you consider allowing operator overloading of your classes?

for improving code readability.
Ensures that objects of a class behave consistently with built-in types and other user-defined types
for making it simpler to write code, especially for complex data types.

Q8. What is the most popular form of operator overloading?
 the most popular form of operator is Addition operator

Q9. What are the two most important concepts to grasp in order to comprehend Python OOP code?

            inheritance 
            polymorphism
